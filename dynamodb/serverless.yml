service:
  # Change this to your project name
  name: aws-nodejs-typescript

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs10.x
  # User can specify region in CLI
  region: ${opt:region, 'us-east-2'}
  # User can  specify stage in CLI
  stage: ${opt:stage, 'dev'}

  # This is where your environment variables go
  environment:
    ITEM_TABLE: Item-${self:provider.stage}
    INDEX_NAME: ItemIdIndex
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret

  # This is where you specify permissions
  iamRoleStatements:
    # DynamoDB example
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_TABLE}
    # Auth0 Secrets
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn

  # This is where you can specify names and models
  custom:
    documentation:
      api:
        info:
          version: v1.0.0
          title: Example API
          description: Example Serverless application
      models:
        - name: ItemRequest
          contentType: application/json
          schema: ${file(models/create-item-request.json)}

functions:
  # Custom Authentication
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # GET /items/{itemId}
  GetItem:
    handler: src/lambda/http/getItem.handler
    events:
      - http:
          method: get
          path: items/{itemId}
          cors: true
          # Add authorization
          #authorizer: Auth
  # GET /items
  GetItems:
    handler: src/lambda/http/getItems.handler
    events:
      - http:
          method: get
          path: items
          cors: true
          # Add authorization
          #authorizer: Auth
  # POST /items
  CreateItem:
    handler: src/lambda/http/createItem.handler
    events:
      - http:
          method: post
          path: items
          cors: true
          reqValidatorName: RequestBodyValidator
          # Add authorization
          #authorizer: Auth
          documentation:
            summary: Create a new item
            description: Create a new item
            requestModels:
              'application/json': ItemRequest
  # PATCH /items/{itemId}
  UpdateItem:
    handler: src/lambda/http/updateItem.handler
    events:
      - http:
          method: patch
          path: items/{itemId}
          cors: true
          reqValidatorName: RequestBodyValidator
          # Add authorization
          #authorizer: Auth
          documentation:
            summary: Update an item
            description: Update an item
            requestModels:
              'application/json': ItemRequest
  # DELETE /items/{itemId}
  DeleteItem:
    handler: src/lambda/http/deleteItem.handler
    events:
      - http:
          method: delete
          path: items/{itemId}
          cors: true
          # Add authorization
          #authorizer: Auth

resources:
  Resources:
    # Example table resource
    ItemDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          # This will be the partition key
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        # Name the Table as the same as the environment variable
        TableName: ${self:provider.environment.ITEM_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: itemId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Validate request body
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # Auth0 KMS
    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ':'
                    - - 'arn:aws:iam:'
                      - Ref: AWS::AccountId
                      - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    # Key name
    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey
    # OAuth Secret
    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 Secret
        KmsKeyId: !Ref KMSKey
