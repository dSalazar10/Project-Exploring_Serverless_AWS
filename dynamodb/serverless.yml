service:
  # Change this to your project name
  name: aws-nodejs-typescript

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs10.x
  # User can specify region in CLI
  region: ${opt:region, 'us-east-2'}
  # User can  specify stage in CLI
  stage: ${opt:stage, 'dev'}

  # This is where your environment variables go
  environment:
    ITEM_TABLE: Item-${self:provider.stage}

  # This is where you specify permissions
  iamRoleStatements:
    # DynamoDB example
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_TABLE}

  # This is where you can specify names and models
  custom:
    documentation:
      api:
        info:
          version: v1.0.0
          title: Example API
          description: Example Serverless application
      models:
        - name: ItemRequest
          contentType: application/json
          schema: ${file(models/create-item-request.json)}

functions:
  # GET /items/{itemId}
  GetItem:
    handler: src/lambda/http/getItem.handler
    events:
      - http:
          method: get
          path: items/{itemId}
          cors: true
  # GET /items
  GetItems:
    handler: src/lambda/http/getItems.handler
    events:
      - http:
          method: get
          path: items
          cors: true
  # POST /items
  CreateItem:
    handler: src/lambda/http/createItem.handler
    events:
      - http:
          method: post
          path: items
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new item
            description: Create a new item
            requestModels:
              'application/json': ItemRequest
  # PATCH /items/{itemId}
  UpdateItem:
    handler: src/lambda/http/updateItem.handler
    events:
      - http:
          method: patch
          path: items/{itemId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an item
            description: Update an item
            requestModels:
              'application/json': ItemRequest
  # DELETE /items/{itemId}
  DeleteItem:
    handler: src/lambda/http/deleteItem.handler
    events:
      - http:
          method: delete
          path: items/{itemId}
          cors: true

resources:
  Resources:
    # Example table resource
    ItemDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          # Single ID field - string
          - AttributeName: id
            AttributeType: S
        KeySchema:
          # This will be the partition key
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # Name the Table as the same as the environment variable
        TableName: ${self:provider.environment.ITEM_TABLE}

    # Validate request body
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
